package gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import grabber.Chapter;
import grabber.formats.EPUB;
import grabber.GrabberUtils;
import grabber.Novel;
import grabber.formats.Text;
import system.Config;
import system.init;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.concurrent.Executors;

public class failedChaptersWindow extends JDialog {
    private JPanel contentPane;
    private JButton buttonOutput;
    private JButton buttonRetry;
    static DefaultListModel<Chapter> chapterListModel;
    private JScrollPane chapterListScrollPane;
    private JList GUIChapterList;
    private JButton buttonClose;
    private Novel novel;

    public failedChaptersWindow(Novel novel) {
        this.novel = novel;
        $$$setupUI$$$();
        setTitle("Download finished with failed chapters");
        setContentPane(contentPane);
        setModal(true);
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        getRootPane().setDefaultButton(buttonOutput);

        buttonOutput.addActionListener(e -> {
            // EPUB
            if (Config.getInstance().getOutputFormat() == 0) {
                EPUB book = new EPUB(novel);
                book.write();
            }
            // Text
            if (Config.getInstance().getOutputFormat() == 1) {
                Text book = new Text(novel);
                book.write();
            }
            dispose();
        });
        buttonRetry.addActionListener(e -> {
            Executors.newSingleThreadExecutor().execute(() -> {
                try {
                    if (novel.window.equals("auto")) {
                        init.gui.autoDownloadInProgress(true);
                    }
                    if (novel.window.equals("manual")) {
                        init.gui.manDownloadInProgress(true);
                    }
                    novel.retry();
                } catch (Exception exception) {
                    GrabberUtils.err(novel.window, exception.getMessage());
                }
                if (novel.window.equals("auto")) {
                    init.gui.autoDownloadInProgress(false);
                }
                if (novel.window.equals("manual")) {
                    init.gui.manDownloadInProgress(false);
                }
            });
            dispose();
        });
        buttonClose.addActionListener(e -> dispose());
    }

    public static void main(Novel novel) {
        failedChaptersWindow dialog = new failedChaptersWindow(novel);
        dialog.pack();
        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);
    }

    private void createUIComponents() {
        chapterListModel = new DefaultListModel<>();
        for (Chapter chapter : novel.failedChapters) {
            chapterListModel.addElement(chapter);
        }
        GUIChapterList = new JList<>(chapterListModel);
        GUIChapterList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        GUIChapterList.setDropMode(DropMode.INSERT);
        GUIChapterList.setDragEnabled(true);
        GUIChapterList.setTransferHandler(new ListItemTransferHandler());
        MouseListener mouseListener = new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    Chapter selectedChapter = (Chapter) GUIChapterList.getSelectedValue();
                    chapterListScrollPane.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    selectedChapter.saveChapter(novel);
                    chapterListScrollPane.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                    chapterPreview.main(selectedChapter);
                }
            }
        };
        GUIChapterList.addMouseListener(mouseListener);
        chapterListScrollPane = new JScrollPane(GUIChapterList, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);

    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.setMinimumSize(new Dimension(500, 500));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonRetry = new JButton();
        buttonRetry.setText("Retry");
        panel2.add(buttonRetry, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        buttonOutput = new JButton();
        buttonOutput.setText("Output Anyway");
        panel2.add(buttonOutput, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonClose = new JButton();
        buttonClose.setText("Close");
        panel2.add(buttonClose, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        contentPane.add(chapterListScrollPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        chapterListScrollPane.setViewportView(GUIChapterList);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
