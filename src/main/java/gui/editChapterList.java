package gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import grabber.Chapter;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class editChapterList extends JDialog {
    private JPanel contentPane;
    private JLabel chapterNamesAreaLbl;
    private JLabel chapterLinksAreaLbl;
    private JButton buttonSave;
    private JButton buttonClose;
    private JTextArea chapterNamesArea;
    private JTextArea chapterLinksArea;
    private String window;

    public editChapterList(String window) {
        this.window = window;
        $$$setupUI$$$();
        ImageIcon favicon = new ImageIcon(getClass().getResource("/images/favicon.png"));
        setIconImage(favicon.getImage());
        setContentPane(contentPane);
        getRootPane().setDefaultButton(buttonSave);
        setModal(true);

        buttonSave.addActionListener(actionEvent -> {
            // Remove empty lines from textAreas
            chapterNamesArea.setText(chapterNamesArea.getText().replaceAll("(?m)^\\s+$", ""));
            chapterLinksArea.setText(chapterLinksArea.getText().replaceAll("(?m)^\\s+$", ""));
            List<String> chapterNames = new ArrayList<>(Arrays.asList(chapterNamesArea.getText().split("\\n")));
            List<String> chapterLinks = new ArrayList<>(Arrays.asList(chapterLinksArea.getText().split("\\n")));
            if (chapterNames.size() == chapterLinks.size()) {
                if (window.equals("auto")) {
                    autoChapterOrder.chapterListModel.clear();
                    for (int i = 0; i < chapterNames.size(); i++) {
                        autoChapterOrder.chapterListModel.addElement(new Chapter(chapterNames.get(i), chapterLinks.get(i)));
                    }
                } else {
                    GUI.manLinkListModel.clear();
                    for (int i = 0; i < chapterNames.size(); i++) {
                        GUI.manLinkListModel.addElement(new Chapter(chapterNames.get(i), chapterLinks.get(i)));
                    }
                }
                dispose();
            } else {
                JOptionPane.showMessageDialog(contentPane, "Lists are not the same length.", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        });

        buttonClose.addActionListener(actionEvent -> onCancel());

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(e -> onCancel(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }

    private void onCancel() {
        dispose();
    }

    public static void main(String window) {
        editChapterList dialog = new editChapterList(window);
        dialog.setTitle("Edit chapter list");
        dialog.pack();
        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);
    }

    private void createUIComponents() {
        chapterNamesArea = new JTextArea();
        chapterLinksArea = new JTextArea();

        if (window.equals("auto")) {
            for (int i = 0; i < autoChapterOrder.chapterListModel.size(); i++) {
                chapterNamesArea.append(autoChapterOrder.chapterListModel.get(i).name + "\n");
                chapterLinksArea.append(autoChapterOrder.chapterListModel.get(i).chapterURL + "\n");
            }
        } else {
            for (int i = 0; i < GUI.manLinkListModel.size(); i++) {
                chapterNamesArea.append(GUI.manLinkListModel.get(i).name + "\n");
                chapterLinksArea.append(GUI.manLinkListModel.get(i).chapterURL + "\n");
            }
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 19, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.setPreferredSize(new Dimension(750, 500));
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setVerifyInputWhenFocusTarget(false);
        contentPane.add(scrollPane1, new GridConstraints(0, 0, 1, 19, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 4, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setVerifyInputWhenFocusTarget(true);
        scrollPane1.setViewportView(panel1);
        chapterNamesAreaLbl = new JLabel();
        chapterNamesAreaLbl.setText("Chapter names:");
        panel1.add(chapterNamesAreaLbl, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        chapterLinksAreaLbl = new JLabel();
        chapterLinksAreaLbl.setText("Chapter links:");
        panel1.add(chapterLinksAreaLbl, new GridConstraints(0, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane2 = new JScrollPane();
        scrollPane2.setVerticalScrollBarPolicy(20);
        panel1.add(scrollPane2, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        chapterNamesArea.setMargin(new Insets(0, 0, 0, 0));
        scrollPane2.setViewportView(chapterNamesArea);
        final JScrollPane scrollPane3 = new JScrollPane();
        panel1.add(scrollPane3, new GridConstraints(1, 2, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        chapterLinksArea.setMargin(new Insets(0, 0, 0, 0));
        scrollPane3.setViewportView(chapterLinksArea);
        final Spacer spacer1 = new Spacer();
        contentPane.add(spacer1, new GridConstraints(1, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel2, new GridConstraints(1, 5, 1, 14, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonSave = new JButton();
        buttonSave.setText("Save");
        panel2.add(buttonSave, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonClose = new JButton();
        buttonClose.setText("Close");
        panel2.add(buttonClose, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
